'''
    # Summary
Main Stuff is
1. Iterable =>
      This is a python object which has this methods __iter__() or __getitem__() predefined in that object
      Basically this means that we can iterate through it using for while loop
2. Iterator =>
      This is a object generated by the iterables objects using __iter__ method
      this uses __next__() Method
3. Iteration =>
      This means we are repeating over an iterator


@ This is an example:

for i in range(List{Iterable object}){Range is a generator}
      pass

@ Here I is the function of generators

The thing is that if we use the for loop then the code
will call the function as many times asked but if we have to
Iterate through 1 billion but I don't want it currently then we must use
 ** Generators to generate the number as we ask for it
=> to use the generator we use the __next__() function

ALSO I HAVE ACCEPTED THE CHALLENGE TO MAKE THE FIBONACCI SEQUENCE AGAIN BUT THIS TIME USING THE GENERATORS

'''

# @ Defining


def Generate(n):
    for i in range(n):
        # * {This is yield is a speciable variable which make i a generator}
        yield i


# ! Fibonacci sequence
def FibonaciSequence(numberOfIterations):
    '''
        (0), (1), (0 + 1), (1 + 1), (1 + 2), (2 + 3), (5 + 3), (5 + 8)
    '''


# ! Factorials


def GenerateFactorial(numberOfFactorials):
    """
          So this the a method which will return the factorail of your number
    This is the factorial with an example:
          (input number{n}) * (n - 1) * (n - 2) ......
          => 6 * (3 + 1)
          => 2 * (2 + 1)
          => 1 * (1 + 1)
          => 1 * (0 + 1)
          => 24
    """
    factorial = 1
    for i in range(numberOfFactorials):
        factorial = factorial * (i + 1)
    Generate(numberOfFactorials)
    print('Your factorial is:', factorial)


# ? Execution
if __name__ == '__main__':
    g = Generate(15)
# ? This will return the Type of the variable
    print(g)

# ! This will iterate for one time and print the variable

    print(g.__next__())
    print(g.__next__())
    print(g.__next__())
    print('--------------------------------------------------------------------------------')

# @ Factorial code
    GenerateFactorial(4)
